{"version":3,"sources":["utils/fetchClient.ts","components/Loader/Loader.tsx","components/PersonNavLink/PersonNavLink.tsx","components/PersonComponent/PersonComponent.tsx","components/PeopleTable/PeopleTable.tsx","components/People/People.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getPeople","delay","url","options","method","Promise","resolve","setTimeout","then","fetch","response","json","Loader","className","PersonNavLink","to","text","sex","classNames","PersonComponent","person","name","born","died","motherName","fatherName","slug","isSelected","mother","father","PeopleTable","peopleData","selectedPerson","map","find","p","People","useState","setPeople","isEmpty","setIsEmpty","hasError","setHasError","useEffect","res","length","catch","useParams","App","role","isActive","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.1bf7767d.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-academy.github.io/react_people-table/api/';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nexport function getPeople(\n  url = 'people.json',\n  method: RequestMethod = 'GET',\n): Promise<[]> {\n  const options: RequestInit = { method };\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string,\n  text: string | null,\n  sex: string,\n};\n\nexport const PersonNavLink: FC<Props> = ({ to, text, sex }) => (\n  <>\n    <NavLink\n      className={classNames({ 'has-text-danger': sex === 'f' })}\n      to={`${to}`}\n    >\n      {text}\n    </NavLink>\n  </>\n);\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Person } from '../../types/Person';\nimport { PersonNavLink } from '../PersonNavLink';\n\ntype Props = {\n  person: Person,\n  isSelected: boolean,\n  mother: Person | undefined,\n  father: Person | undefined,\n};\n\nexport const PersonComponent: FC<Props> = ({\n  person: {\n    name,\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n    slug,\n  },\n  isSelected,\n  mother,\n  father,\n}) => (\n  <tr\n    data-cy=\"person\"\n    className={classNames({ 'has-background-warning': isSelected })}\n  >\n    <td>\n      <PersonNavLink\n        to={slug}\n        text={name}\n        sex={sex}\n      />\n    </td>\n\n    <td>{sex}</td>\n    <td>{born}</td>\n    <td>{died}</td>\n    <td>\n      {mother\n        ? (\n          <PersonNavLink\n            to={mother.slug}\n            text={mother.name}\n            sex={mother.sex}\n          />\n        )\n        : motherName || '-'}\n    </td>\n    <td>\n      {father\n        ? (\n          <PersonNavLink\n            to={father.slug}\n            text={father.name}\n            sex={father.sex}\n          />\n        )\n        : fatherName || '-'}\n    </td>\n  </tr>\n);\n","import { FC } from 'react';\nimport { Person } from '../../types/Person';\nimport { PersonComponent } from '../PersonComponent';\n\ntype Props = {\n  peopleData: Person[],\n  selectedPerson: string,\n};\n\nexport const PeopleTable: FC<Props> = ({\n  peopleData,\n  selectedPerson,\n}) => (\n  <table\n    data-cy=\"peopleTable\"\n    className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n  >\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Sex</th>\n        <th>Born</th>\n        <th>Died</th>\n        <th>Mother</th>\n        <th>Father</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {peopleData.map((person: Person) => {\n        const mother = peopleData\n          .find(p => p.name === person.motherName);\n        const father = peopleData\n          .find(p => p.name === person.fatherName);\n\n        return (\n          <PersonComponent\n            key={person.slug}\n            person={person}\n            isSelected={person.slug === selectedPerson}\n            mother={mother}\n            father={father}\n          />\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../../utils/fetchClient';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeopleTable';\n\nexport const People: FC = () => {\n  const [peopleData, setPeople] = useState([]);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    getPeople()\n      .then(res => {\n        setIsEmpty(!res.length);\n        setPeople(res);\n      })\n      .catch(() => setHasError(true));\n  }, []);\n\n  const { slug = '' } = useParams();\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      {peopleData.length\n        ? (\n          <PeopleTable\n            peopleData={peopleData}\n            selectedPerson={slug}\n          />\n        )\n        : (\n          <div className=\"block\">\n            <div className=\"box table-container\">\n              {(!hasError && !isEmpty) && (\n                <Loader />\n              )}\n\n              {hasError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isEmpty && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n            </div>\n          </div>\n        )}\n    </>\n  );\n};\n","import './App.scss';\nimport {\n  Route,\n  Routes,\n  Navigate,\n  NavLink,\n} from 'react-router-dom';\nimport classNames from 'classnames';\nimport { People } from './components/People';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={({ isActive }) => {\n              return classNames('navbar-item',\n                { 'has-background-grey-lighter': isActive });\n            }}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={({ isActive }) => (classNames(\n              'navbar-item',\n              { 'has-background-grey-lighter': isActive },\n            ))}\n            to=\"people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <h1 className=\"title\">Home Page</h1>\n            }\n          />\n\n          <Route\n            path=\"home\"\n            element={\n              <Navigate to=\"/\" replace />\n            }\n          />\n\n          <Route path=\"people\">\n            <Route\n              index\n              element={\n                <People />\n              }\n            />\n\n            <Route\n              path=\":slug\"\n              element={\n                <People />\n              }\n            />\n          </Route>\n\n          <Route\n            path=\"*\"\n            element={\n              <h1 className=\"title\">Page not found</h1>\n            }\n          />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}